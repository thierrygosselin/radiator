% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vcf.R
\name{tidy_vcf}
\alias{tidy_vcf}
\title{Tidy vcf file}
\usage{
tidy_vcf(
  data,
  strata = NULL,
  filename = NULL,
  parallel.core = parallel::detectCores() - 1,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{data}{(VCF file, character string) The VCF SNPs are biallelic or haplotypes.
To make the VCF population-ready, the argument \code{strata} is required.}

\item{strata}{(optional)
The strata file is a tab delimited file with a minimum of 2 columns headers:
\code{INDIVIDUALS} and \code{STRATA}. Documented in \code{\link{read_strata}}.
DArT data: a third column \code{TARGET_ID} is required.
Documented on \code{\link{read_dart}}. Also use the strata read function to
blacklist individuals.
Default: \code{strata = NULL}.}

\item{filename}{(optional) The function uses \code{\link[fst]{write.fst}},
to write the tidy data frame in
the working directory. The file extension appended to
the \code{filename} provided is \code{.rad}.
With default: \code{filename = NULL}, the tidy data frame is
in the global environment only (i.e. not written in the working directory...).}

\item{parallel.core}{(optional) The number of core used for parallel
execution during import.
Default: \code{parallel.core = parallel::detectCores() - 1}.}

\item{verbose}{(optional, logical) When \code{verbose = TRUE}
the function is a little more chatty during execution.
Default: \code{verbose = TRUE}.}

\item{...}{(optional) To pass further argument for fine-tuning the tidying
(read below).}
}
\value{
The output in your global environment is a tidy data frame, the GDS file
generated is in the working directory under the name given during function execution.
}
\description{
The function allows to tidy a VCF file.

Used internally in
\href{https://github.com/thierrygosselin/radiator}{radiator}
and might be of interest for users.

It is highly recommended to use \code{\link[radiator]{filter_rad}} to reduce
the number of markers. Advance options below are also available to
to manipulate and prune the dataset with blacklists and whitelists along
several other filtering options.
}
\section{VCF file format}{


\strong{PLINK:} radiator fills the \code{LOCUS} column of PLINK VCFs with
a unique integer based on the \code{CHROM} column
(\code{as.integer(factor(x = CHROM))}).
The \code{COL} column is filled with 1L for lack of bettern info on this.
Not what you need ? Open an issue on GitHub for a request.

\strong{ipyrad:} the pattern \code{locus_} in the \code{CHROM} column
is removed and used. The \code{COL} column is filled with the same value as
\code{POS}.

\strong{GATK:} Some VCF have an \code{ID} column filled with \code{.},
the LOCUS information is all contained along the linkage group in the
\code{CHROM} column. To make it work with
\href{https://github.com/thierrygosselin/radiator}{radiator},
the \code{ID} column is filled with the \code{POS} column info.
GATK with a mix of multi- and bi-allelic dataset won't generate VCF stats.

\strong{platypus:} Some VCF files don't have an ID filed with values,
here the same thing is done as GATK VCF files above.

\strong{freebayes:} Some VCF files don't have an ID filed with values,
here the same thing is done as GATK VCF files above.

\strong{stacks:} with \emph{de novo} approaches, the CHROM column is
filled with "1", the LOCUS column correspond to the CHROM section in stacks VCF and
the COL column is POS -1. With a reference genome, the ID column in stacks VCF is
separated into "LOCUS", "COL", "STRANDS".

\emph{stacks problem: } current version as some intrinsic problem with
missing allele depth info, during the tidying process a message will
highlight the number of genotypes impacted by the problem. When possible, the
problem is corrected by adding the read depth info into the allele depth field.
}

\section{Advance mode, using \emph{dots-dots-dots ...}}{


The arguments below are not available using code completion (e.g. with TAB),
consequently any misspelling will generate an error or be ignored.

\emph{dots-dots-dots ...} arguments names and values are reported and written
in the working directory.

\strong{General arguments: }
\enumerate{
\item \code{path.folder}: to write ouput in a specific path
(used internally in radiator). Default: \code{path.folder = getwd()}.
If the supplied directory doesn't exist, it's created.
\item \code{random.seed}: (integer, optional) For reproducibility, set an integer
that will be used inside codes that uses randomness. With default,
a random number is generated, printed and written in the appropriate directory.
Random seed is recycled inside the function that will import the VCF file before
tidying.
Default: \code{random.seed = NULL}.
}
\strong{tidying arguments/behavior:}
\enumerate{
\item \code{tidy.vcf:} (optional, logical)
Default: \code{tidy.vcf = TRUE}. But you can always stop the process after
the creation of the GDS file (equivalent of running \code{\link{read_vcf}}).
\item \code{tidy.check:} (optional, logical)
Default: \code{tidy.check = TRUE}. By default, the number of markers just before
tidying is checked. Tidying a VCF file with more than 20000 markers is
sub-optimal:
\itemize{
\item a computer with lots of RAM is required
\item it's very slow to generate
\item it's very slow to run codes after
\item for most non model species this number of markers is not realistic...
}
Consequently, the function execution is suspended and user are asked if they
still want to continue with the tidying or stop and keep the GDS file/object.

This behavior can be annoying, \emph{if the user knows what he's doing}, to turn off
use: \code{tidy.check = FALSE}.
\item \code{calibrate.alleles: } (optional, logical)
Default: \code{calibrate.alleles = FALSE}.
Documented in \code{\link[radiator]{calibrate_alleles}}.
\item \code{vcf.stats: } (optional, logical) Generates individuals and
markers statistics helpful for filtering.
These are very fast to generate and because computational
cost is minimal, even for huge VCFs, the default is \code{vcf.stats = TRUE}.
\item \code{vcf.metadata: } (optional, logical or character string)
With \code{vcf.metadata = FALSE}, only the genotypes are kept (GT field)
in the tidy dataset.
With \code{vcf.metadata = TRUE},
all the metadata contained in the \code{FORMAT} field will be kept in
the tidy data file. radiator is currently keeping and cleaning these metadata:
\code{"DP", "AD", "GL", "PL", "GQ", "HQ", "GOF", "NR", "NV", "CATG"}.
e.g. you only want AD and PL, \code{vcf.metadata = c("AD", "PL")}.
Need another metadata ? Submit a request on github...
Default: \code{vcf.metadata = TRUE}.
}

\strong{Filtering arguments:}
\enumerate{
\item \code{blacklist.id: } (optional, character)
Default (\code{blacklist.id = NULL}).
Documented in \code{\link[radiator]{tidy_genomic_data}}.
\item \code{filter.strands}: (optional, character)
 Default (\code{filter.strands = "blacklist"}).
 documented in \code{\link[radiator]{read_vcf}}.
\item \code{whitelist.markers: }(optional, path)
Default: \code{whitelist.markers = NULL}.
Documented in \code{\link[radiator]{filter_whitelist}}.
\item \code{filter.individuals.missing}: (double)
Default: \code{filter.individuals.missing = NULL}.
Documented in \code{\link[radiator]{filter_individuals}}.
\item \code{filter.monomorphic}: (logical)
Default: \code{filter.monomorphic = TRUE}.
Documented in \code{\link[radiator]{filter_monomorphic}}.
Required package: \code{UpSetR}.
\item \code{filter.common.markers}: (logical)
Default: \code{filter.common.markers = TRUE}.
Documented in \code{\link[radiator]{filter_common_markers}}.
Required package: \code{UpSetR}.
\item \code{filter.ma}: (integer)
Default: \code{filter.ma = NULL}.
Documented in \code{\link[radiator]{filter_ma}}.
\item \code{filter.coverage}: (logical)
Default: \code{filter.coverage = NULL}.
Documented in \code{\link[radiator]{filter_coverage}}.
\item \code{filter.genotyping}: (integer)
Default: \code{filter.genotyping = NULL}.
Documented in \code{\link[radiator]{filter_genotyping}}.
\item \code{filter.snp.position.read: } (optional, character, integer)
Default: \code{filter.snp.position.read = NULL}.
Documented in \code{\link[radiator]{filter_snp_position_read}}.
\item \code{filter.snp.number: } (optional, character, integer)
Default: \code{filter.snp.number = NULL}.
Documented in \code{\link[radiator]{filter_snp_number}}.
\item \code{filter.short.ld}: (optional, character)
Default: \code{filter.short.ld = NULL}.
Documented in \code{\link[radiator]{filter_ld}}.
\item \code{filter.long.ld}: (optional, character)
Default: \code{filter.long.ld = NULL}.
Documented in \code{\link[radiator]{filter_ld}}.
Required package: \code{SNPRelate}.
\item \code{long.ld.missing}: Documented in \code{\link[radiator]{filter_ld}}.
Default: \code{long.ld.missing = FALSE}.
\item \code{ld.method}: Documented in \code{\link[radiator]{filter_ld}}.
Default: \code{ld.method = "r2"}.
}
}

\examples{
\dontrun{
# very basic with built-in defaults (not recommended):
prep.data <- radiator::tidy_vcf(data = "populations.snps.vcf")

# Using more arguments and filters (recommended):
tidy.data <- radiator::tidy_vcf(
    data = "populations.snps.vcf",
    strata = "strata_salamander.tsv",
    filter.individuals.missing = "outlier",
    filter.ma = 4,
    filter.genotyping = 0.1,
    filter.snp.position.read = "outliers",
    filter.short.ld = "mac",
    path.folder = "salamander/prep_data",
    verbose = TRUE)
}
}
\references{
Danecek P, Auton A, Abecasis G et al. (2011)
The variant call format and VCFtools.
Bioinformatics, 27, 2156-2158.
}
\seealso{
\code{\link[radiator]{read_vcf}},
\code{\link[radiator]{tidy_genomic_data}},
\code{\link[radiator]{filter_rad}}
}
\author{
Thierry Gosselin \email{thierrygosselin@icloud.com}
}
